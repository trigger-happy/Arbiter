// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Message.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RunOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProblemSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProblemSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Language_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Language_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Message_2eproto() {
  protobuf_AddDesc_Message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Message.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, requested_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, run_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, problem_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, run_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, language_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_MessageType_descriptor_ = Message_descriptor_->enum_type(0);
  RunOrder_descriptor_ = file->message_type(1);
  static const int RunOrder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOrder, problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOrder, language_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOrder, run_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOrder, attachment_),
  };
  RunOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunOrder_descriptor_,
      RunOrder::default_instance_,
      RunOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunOrder));
  ProblemSet_descriptor_ = file->message_type(2);
  static const int ProblemSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProblemSet, problem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProblemSet, attachment_),
  };
  ProblemSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProblemSet_descriptor_,
      ProblemSet::default_instance_,
      ProblemSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProblemSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProblemSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProblemSet));
  RunResult_descriptor_ = file->message_type(3);
  static const int RunResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunResult, run_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunResult, stdout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunResult, stderr_),
  };
  RunResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunResult_descriptor_,
      RunResult::default_instance_,
      RunResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunResult));
  Language_descriptor_ = file->message_type(4);
  static const int Language_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Language, language_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Language, attachment_),
  };
  Language_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Language_descriptor_,
      Language::default_instance_,
      Language_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Language, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Language, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Language));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunOrder_descriptor_, &RunOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProblemSet_descriptor_, &ProblemSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunResult_descriptor_, &RunResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Language_descriptor_, &Language::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Message_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete RunOrder::default_instance_;
  delete RunOrder_reflection_;
  delete ProblemSet::default_instance_;
  delete ProblemSet_reflection_;
  delete RunResult::default_instance_;
  delete RunResult_reflection_;
  delete Language::default_instance_;
  delete Language_reflection_;
}

void protobuf_AddDesc_Message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMessage.proto\"\262\003\n\007Message\022\"\n\004type\030\001 \002("
    "\0162\024.Message.MessageType\022\014\n\004text\030\002 \001(\t\022\031\n"
    "\021requested_item_id\030\003 \001(\r\022\034\n\trun_order\030\004 "
    "\001(\0132\t.RunOrder\022 \n\013problem_set\030\005 \001(\0132\013.Pr"
    "oblemSet\022\036\n\nrun_result\030\006 \001(\0132\n.RunResult"
    "\022\033\n\010language\030\007 \001(\0132\t.Language\"\334\001\n\013Messag"
    "eType\022\013\n\007CONNECT\020\000\022\r\n\tCHALLENGE\020\001\022\026\n\022CHA"
    "LLENGE_RESPONSE\020\002\022\017\n\013ACKNOWLEDGE\020\003\022\010\n\004PI"
    "NG\020\004\022\021\n\rPING_RESPONSE\020\005\022\r\n\tRUN_ORDER\020\006\022\027"
    "\n\023PROBLEM_SET_REQUEST\020\007\022\017\n\013PROBLEM_SET\020\010"
    "\022\016\n\nRUN_RESULT\020\t\022\024\n\020LANGUAGE_REQUEST\020\n\022\014"
    "\n\010LANGUAGE\020\013\"W\n\010RunOrder\022\022\n\nproblem_id\030\001"
    " \002(\r\022\023\n\013language_id\030\002 \002(\r\022\016\n\006run_id\030\003 \002("
    "\r\022\022\n\nattachment\030\004 \002(\014\"4\n\nProblemSet\022\022\n\np"
    "roblem_id\030\001 \002(\r\022\022\n\nattachment\030\002 \002(\014\"K\n\tR"
    "unResult\022\016\n\006run_id\030\001 \002(\r\022\016\n\006result\030\002 \002(\r"
    "\022\016\n\006stdout\030\003 \001(\t\022\016\n\006stderr\030\004 \001(\t\"3\n\010Lang"
    "uage\022\023\n\013language_id\030\001 \002(\r\022\022\n\nattachment\030"
    "\002 \002(\014", 725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Message.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  RunOrder::default_instance_ = new RunOrder();
  ProblemSet::default_instance_ = new ProblemSet();
  RunResult::default_instance_ = new RunResult();
  Language::default_instance_ = new Language();
  Message::default_instance_->InitAsDefaultInstance();
  RunOrder::default_instance_->InitAsDefaultInstance();
  ProblemSet::default_instance_->InitAsDefaultInstance();
  RunResult::default_instance_->InitAsDefaultInstance();
  Language::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Message_2eproto {
  StaticDescriptorInitializer_Message_2eproto() {
    protobuf_AddDesc_Message_2eproto();
  }
} static_descriptor_initializer_Message_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MessageType_descriptor_;
}
bool Message_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_MessageType Message::CONNECT;
const Message_MessageType Message::CHALLENGE;
const Message_MessageType Message::CHALLENGE_RESPONSE;
const Message_MessageType Message::ACKNOWLEDGE;
const Message_MessageType Message::PING;
const Message_MessageType Message::PING_RESPONSE;
const Message_MessageType Message::RUN_ORDER;
const Message_MessageType Message::PROBLEM_SET_REQUEST;
const Message_MessageType Message::PROBLEM_SET;
const Message_MessageType Message::RUN_RESULT;
const Message_MessageType Message::LANGUAGE_REQUEST;
const Message_MessageType Message::LANGUAGE;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Message::_default_text_;
#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kTextFieldNumber;
const int Message::kRequestedItemIdFieldNumber;
const int Message::kRunOrderFieldNumber;
const int Message::kProblemSetFieldNumber;
const int Message::kRunResultFieldNumber;
const int Message::kLanguageFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  run_order_ = const_cast< ::RunOrder*>(&::RunOrder::default_instance());
  problem_set_ = const_cast< ::ProblemSet*>(&::ProblemSet::default_instance());
  run_result_ = const_cast< ::RunResult*>(&::RunResult::default_instance());
  language_ = const_cast< ::Language*>(&::Language::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  requested_item_id_ = 0u;
  run_order_ = NULL;
  problem_set_ = NULL;
  run_result_ = NULL;
  language_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
    delete run_order_;
    delete problem_set_;
    delete run_result_;
    delete language_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (_has_bit(1)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
    requested_item_id_ = 0u;
    if (_has_bit(3)) {
      if (run_order_ != NULL) run_order_->::RunOrder::Clear();
    }
    if (_has_bit(4)) {
      if (problem_set_ != NULL) problem_set_->::ProblemSet::Clear();
    }
    if (_has_bit(5)) {
      if (run_result_ != NULL) run_result_->::RunResult::Clear();
    }
    if (_has_bit(6)) {
      if (language_ != NULL) language_->::Language::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Message.MessageType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Message_MessageType_IsValid(value)) {
            set_type(static_cast< ::Message_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requested_item_id;
        break;
      }
      
      // optional uint32 requested_item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requested_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requested_item_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_run_order;
        break;
      }
      
      // optional .RunOrder run_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_run_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_problem_set;
        break;
      }
      
      // optional .ProblemSet problem_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_problem_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_problem_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_run_result;
        break;
      }
      
      // optional .RunResult run_result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_run_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_language;
        break;
      }
      
      // optional .Language language = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_language()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Message.MessageType type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  // optional uint32 requested_item_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->requested_item_id(), output);
  }
  
  // optional .RunOrder run_order = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->run_order(), output);
  }
  
  // optional .ProblemSet problem_set = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->problem_set(), output);
  }
  
  // optional .RunResult run_result = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->run_result(), output);
  }
  
  // optional .Language language = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->language(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Message.MessageType type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string text = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  // optional uint32 requested_item_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->requested_item_id(), target);
  }
  
  // optional .RunOrder run_order = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->run_order(), target);
  }
  
  // optional .ProblemSet problem_set = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->problem_set(), target);
  }
  
  // optional .RunResult run_result = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->run_result(), target);
  }
  
  // optional .Language language = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->language(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Message.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional uint32 requested_item_id = 3;
    if (has_requested_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requested_item_id());
    }
    
    // optional .RunOrder run_order = 4;
    if (has_run_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->run_order());
    }
    
    // optional .ProblemSet problem_set = 5;
    if (has_problem_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->problem_set());
    }
    
    // optional .RunResult run_result = 6;
    if (has_run_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->run_result());
    }
    
    // optional .Language language = 7;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->language());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_text(from.text());
    }
    if (from._has_bit(2)) {
      set_requested_item_id(from.requested_item_id());
    }
    if (from._has_bit(3)) {
      mutable_run_order()->::RunOrder::MergeFrom(from.run_order());
    }
    if (from._has_bit(4)) {
      mutable_problem_set()->::ProblemSet::MergeFrom(from.problem_set());
    }
    if (from._has_bit(5)) {
      mutable_run_result()->::RunResult::MergeFrom(from.run_result());
    }
    if (from._has_bit(6)) {
      mutable_language()->::Language::MergeFrom(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_run_order()) {
    if (!this->run_order().IsInitialized()) return false;
  }
  if (has_problem_set()) {
    if (!this->problem_set().IsInitialized()) return false;
  }
  if (has_run_result()) {
    if (!this->run_result().IsInitialized()) return false;
  }
  if (has_language()) {
    if (!this->language().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_, other->text_);
    std::swap(requested_item_id_, other->requested_item_id_);
    std::swap(run_order_, other->run_order_);
    std::swap(problem_set_, other->problem_set_);
    std::swap(run_result_, other->run_result_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RunOrder::_default_attachment_;
#ifndef _MSC_VER
const int RunOrder::kProblemIdFieldNumber;
const int RunOrder::kLanguageIdFieldNumber;
const int RunOrder::kRunIdFieldNumber;
const int RunOrder::kAttachmentFieldNumber;
#endif  // !_MSC_VER

RunOrder::RunOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunOrder::InitAsDefaultInstance() {
}

RunOrder::RunOrder(const RunOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunOrder::SharedCtor() {
  _cached_size_ = 0;
  problem_id_ = 0u;
  language_id_ = 0u;
  run_id_ = 0u;
  attachment_ = const_cast< ::std::string*>(&_default_attachment_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunOrder::~RunOrder() {
  SharedDtor();
}

void RunOrder::SharedDtor() {
  if (attachment_ != &_default_attachment_) {
    delete attachment_;
  }
  if (this != default_instance_) {
  }
}

void RunOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunOrder_descriptor_;
}

const RunOrder& RunOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

RunOrder* RunOrder::default_instance_ = NULL;

RunOrder* RunOrder::New() const {
  return new RunOrder;
}

void RunOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    problem_id_ = 0u;
    language_id_ = 0u;
    run_id_ = 0u;
    if (_has_bit(3)) {
      if (attachment_ != &_default_attachment_) {
        attachment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 problem_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &problem_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_language_id;
        break;
      }
      
      // required uint32 language_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_run_id;
        break;
      }
      
      // required uint32 run_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_run_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attachment;
        break;
      }
      
      // required bytes attachment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 problem_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->problem_id(), output);
  }
  
  // required uint32 language_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->language_id(), output);
  }
  
  // required uint32 run_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->run_id(), output);
  }
  
  // required bytes attachment = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->attachment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 problem_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->problem_id(), target);
  }
  
  // required uint32 language_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->language_id(), target);
  }
  
  // required uint32 run_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->run_id(), target);
  }
  
  // required bytes attachment = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->attachment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 problem_id = 1;
    if (has_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->problem_id());
    }
    
    // required uint32 language_id = 2;
    if (has_language_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language_id());
    }
    
    // required uint32 run_id = 3;
    if (has_run_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run_id());
    }
    
    // required bytes attachment = 4;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attachment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunOrder::MergeFrom(const RunOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_problem_id(from.problem_id());
    }
    if (from._has_bit(1)) {
      set_language_id(from.language_id());
    }
    if (from._has_bit(2)) {
      set_run_id(from.run_id());
    }
    if (from._has_bit(3)) {
      set_attachment(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunOrder::CopyFrom(const RunOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RunOrder::Swap(RunOrder* other) {
  if (other != this) {
    std::swap(problem_id_, other->problem_id_);
    std::swap(language_id_, other->language_id_);
    std::swap(run_id_, other->run_id_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunOrder_descriptor_;
  metadata.reflection = RunOrder_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ProblemSet::_default_attachment_;
#ifndef _MSC_VER
const int ProblemSet::kProblemIdFieldNumber;
const int ProblemSet::kAttachmentFieldNumber;
#endif  // !_MSC_VER

ProblemSet::ProblemSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProblemSet::InitAsDefaultInstance() {
}

ProblemSet::ProblemSet(const ProblemSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProblemSet::SharedCtor() {
  _cached_size_ = 0;
  problem_id_ = 0u;
  attachment_ = const_cast< ::std::string*>(&_default_attachment_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProblemSet::~ProblemSet() {
  SharedDtor();
}

void ProblemSet::SharedDtor() {
  if (attachment_ != &_default_attachment_) {
    delete attachment_;
  }
  if (this != default_instance_) {
  }
}

void ProblemSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProblemSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProblemSet_descriptor_;
}

const ProblemSet& ProblemSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

ProblemSet* ProblemSet::default_instance_ = NULL;

ProblemSet* ProblemSet::New() const {
  return new ProblemSet;
}

void ProblemSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    problem_id_ = 0u;
    if (_has_bit(1)) {
      if (attachment_ != &_default_attachment_) {
        attachment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProblemSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 problem_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &problem_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attachment;
        break;
      }
      
      // required bytes attachment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProblemSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 problem_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->problem_id(), output);
  }
  
  // required bytes attachment = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->attachment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProblemSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 problem_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->problem_id(), target);
  }
  
  // required bytes attachment = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attachment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProblemSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 problem_id = 1;
    if (has_problem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->problem_id());
    }
    
    // required bytes attachment = 2;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attachment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProblemSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProblemSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProblemSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProblemSet::MergeFrom(const ProblemSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_problem_id(from.problem_id());
    }
    if (from._has_bit(1)) {
      set_attachment(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProblemSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProblemSet::CopyFrom(const ProblemSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProblemSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProblemSet::Swap(ProblemSet* other) {
  if (other != this) {
    std::swap(problem_id_, other->problem_id_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProblemSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProblemSet_descriptor_;
  metadata.reflection = ProblemSet_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RunResult::_default_stdout_;
const ::std::string RunResult::_default_stderr_;
#ifndef _MSC_VER
const int RunResult::kRunIdFieldNumber;
const int RunResult::kResultFieldNumber;
const int RunResult::kStdoutFieldNumber;
const int RunResult::kStderrFieldNumber;
#endif  // !_MSC_VER

RunResult::RunResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunResult::InitAsDefaultInstance() {
}

RunResult::RunResult(const RunResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunResult::SharedCtor() {
  _cached_size_ = 0;
  run_id_ = 0u;
  result_ = 0u;
  stdout_ = const_cast< ::std::string*>(&_default_stdout_);
  stderr_ = const_cast< ::std::string*>(&_default_stderr_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunResult::~RunResult() {
  SharedDtor();
}

void RunResult::SharedDtor() {
  if (stdout_ != &_default_stdout_) {
    delete stdout_;
  }
  if (stderr_ != &_default_stderr_) {
    delete stderr_;
  }
  if (this != default_instance_) {
  }
}

void RunResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunResult_descriptor_;
}

const RunResult& RunResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

RunResult* RunResult::default_instance_ = NULL;

RunResult* RunResult::New() const {
  return new RunResult;
}

void RunResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    run_id_ = 0u;
    result_ = 0u;
    if (_has_bit(2)) {
      if (stdout_ != &_default_stdout_) {
        stdout_->clear();
      }
    }
    if (_has_bit(3)) {
      if (stderr_ != &_default_stderr_) {
        stderr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 run_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stdout;
        break;
      }
      
      // optional string stdout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stdout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stdout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stdout().data(), this->stdout().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stderr;
        break;
      }
      
      // optional string stderr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stderr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stderr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stderr().data(), this->stderr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 run_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->run_id(), output);
  }
  
  // required uint32 result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }
  
  // optional string stdout = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stdout().data(), this->stdout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stdout(), output);
  }
  
  // optional string stderr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stderr().data(), this->stderr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stderr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 run_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->run_id(), target);
  }
  
  // required uint32 result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }
  
  // optional string stdout = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stdout().data(), this->stdout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stdout(), target);
  }
  
  // optional string stderr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stderr().data(), this->stderr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stderr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 run_id = 1;
    if (has_run_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run_id());
    }
    
    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
    // optional string stdout = 3;
    if (has_stdout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stdout());
    }
    
    // optional string stderr = 4;
    if (has_stderr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stderr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunResult::MergeFrom(const RunResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_run_id(from.run_id());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_stdout(from.stdout());
    }
    if (from._has_bit(3)) {
      set_stderr(from.stderr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunResult::CopyFrom(const RunResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RunResult::Swap(RunResult* other) {
  if (other != this) {
    std::swap(run_id_, other->run_id_);
    std::swap(result_, other->result_);
    std::swap(stdout_, other->stdout_);
    std::swap(stderr_, other->stderr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunResult_descriptor_;
  metadata.reflection = RunResult_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Language::_default_attachment_;
#ifndef _MSC_VER
const int Language::kLanguageIdFieldNumber;
const int Language::kAttachmentFieldNumber;
#endif  // !_MSC_VER

Language::Language()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Language::InitAsDefaultInstance() {
}

Language::Language(const Language& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Language::SharedCtor() {
  _cached_size_ = 0;
  language_id_ = 0u;
  attachment_ = const_cast< ::std::string*>(&_default_attachment_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Language::~Language() {
  SharedDtor();
}

void Language::SharedDtor() {
  if (attachment_ != &_default_attachment_) {
    delete attachment_;
  }
  if (this != default_instance_) {
  }
}

void Language::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Language::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Language_descriptor_;
}

const Language& Language::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Message_2eproto();  return *default_instance_;
}

Language* Language::default_instance_ = NULL;

Language* Language::New() const {
  return new Language;
}

void Language::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    language_id_ = 0u;
    if (_has_bit(1)) {
      if (attachment_ != &_default_attachment_) {
        attachment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Language::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 language_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attachment;
        break;
      }
      
      // required bytes attachment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Language::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 language_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language_id(), output);
  }
  
  // required bytes attachment = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->attachment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Language::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 language_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language_id(), target);
  }
  
  // required bytes attachment = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attachment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Language::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 language_id = 1;
    if (has_language_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language_id());
    }
    
    // required bytes attachment = 2;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attachment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Language::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Language* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Language*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Language::MergeFrom(const Language& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_language_id(from.language_id());
    }
    if (from._has_bit(1)) {
      set_attachment(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Language::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Language::CopyFrom(const Language& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Language::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Language::Swap(Language* other) {
  if (other != this) {
    std::swap(language_id_, other->language_id_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Language::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Language_descriptor_;
  metadata.reflection = Language_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
